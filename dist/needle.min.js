/*!
 * Needle v1.0.0-alpha | MIT 
 * Copyright (c) 2015 Nick Zuber <zuber.nicholas@gmail.com>
 */
!function e(t,i,n){function r(s,h){if(!i[s]){if(!t[s]){var f="function"==typeof require&&require;if(!h&&f)return f(s,!0);if(o)return o(s,!0);throw new Error("Cannot find module '"+s+"'")}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return r(i?i:e)},u,u.exports,e,t,i,n)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(e,t,i){"use strict";const n=e("./lib/singlyLinkedList.js"),r=e("./lib/queue.js"),o=e("./lib/doublyLinkedList.js"),s=e("./lib/binaryHeap.js"),h={};h.SinglyLinkedList=n,h.Queue=r,h.DoublyLinkedList=o,h.BinaryHeap=s,i=t.exports=h,"undefined"!=typeof window&&(window.Needle=h)},{"./lib/binaryHeap.js":3,"./lib/doublyLinkedList.js":4,"./lib/queue.js":5,"./lib/singlyLinkedList.js":6}],2:[function(e,t,i){"use strict";const n=function(e){this.data=e||void 0,this.next=null,this.prev=null};t.exports=n},{}],3:[function(e,t,i){"use strict";function n(e,t){return t>e}function r(e,t,i){if("function"!=typeof i)throw new TypeError("Compare must be a function in BinaryHeap");if("undefined"==typeof e&&"undefined"!=typeof t||"undefined"!=typeof t&&"undefined"==typeof t)return!1;if("undefined"!=typeof e&&"undefined"!=typeof t)return i(e,t);throw new TypeError("Comparing two undefined elements in BinaryHeap. Please report this to https://github.com/nickzuber/needle/issues")}Array.prototype.swap=function(e,t){var i=this[e];return this[e]=this[t],this[t]=i,this};const o=function(e){this.heap=[null],this.compare=n,"function"==typeof e&&(this.compare=e)};o.prototype.peek=function(){return this.heap[1]},o.prototype.insert=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for BinaryHeap.insert");if(this.heap.push(e),!(this.heap.length<=2))for(var t=this.heap.length-1;t>1;)r(this.heap[t],this.heap[Math.floor(t/2)],this.compare)&&this.heap.swap(t,Math.floor(t/2)),t=Math.floor(t/2)},o.prototype["delete"]=function(){if(this.heap.length<=1)throw new Error("Attempted to remove min element from an empty binary heap in BinaryHeap.delete");if(this.heap.swap(1,this.heap.length-1),this.heap.pop(),2===this.heap.length);else if(3===this.heap.length){var e=1;r(this.heap[2*e],this.heap[e],this.compare)&&this.heap.swap(e,2*e)}else for(var t=0,e=1;r(this.heap[2*e],this.heap[e],this.compare)||r(this.heap[2*e+1],this.heap[e],this.compare);){var i;if(i=r(this.heap[2*e],this.heap[2*e+1],this.compare)?2*e:2*e+1,this.heap.swap(e,i),e=i,++t,t>1e3)throw new Error("Timeout error in BinaryHeap.removeMin. Please report this to https://github.com/nickzuber/needle/issues")}},t.exports=o},{}],4:[function(e,t,i){"use strict";const n=e("./bidirectional_node.js"),r=function(e){this.head,this.tail,this.size,"undefined"!=typeof e?(this.head=new n(e),this.tail=this.head,this.size=1):(this.head=null,this.tail=null,this.size=0)};r.prototype.insertFront=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.insertFront");var t=new n(e);if(null===this.head&&null===this.tail)this.head=t,this.tail=this.head;else{if(null===this.head||null===this.tail)throw new Error("Unsynced head and tail in an Doubly Linked List. Please report this to https://github.com/nickzuber/needle/issues");var i=this.head;i.prev=t,this.head=t,this.head.next=i,this.head.prev=null}++this.size},r.prototype.insertNth=function(e,t){if("undefined"==typeof t||"undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.insertNth");if("number"!=typeof e)throw new TypeError("Invalid argument for DoublyLinkedList.insertNth");if(0>e||e>=this.size)throw new Error("Index out of bounds on DoublyLinkedList.insertNth");if(null===this.head)return!1;if(0===e)return void this.insertFront(t);if(e===this.size-1)return void this.insertBack(t);for(var i=new n(t),r=this.head,o=1;e>o;++o)r=r.next;var s=r.next;r.next=i,s.prev=i,i.prev=r,i.next=s,++this.size},r.prototype.insertAfter=function(e,t){if("undefined"==typeof t||"undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.insertAfter");if(null===this.head)return!1;var i=new n(t),r=this.head,o=!1;if(JSON.stringify(this.tail.data)===JSON.stringify(e))return this.insertBack(t),!0;for(;null!==r;){if(JSON.stringify(r.data)===JSON.stringify(e)){o=!0;break}r=r.next}if(o){var s=r.next;return r.next=i,s.prev=i,i.prev=r,i.next=s,++this.size,!0}return!1},r.prototype.insertBack=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.insert");var t=new n(e);null===this.head?(this.head=t,this.tail=this.head):(t.next=null,t.prev=this.tail,this.tail.next=t,this.tail=t),++this.size},r.prototype.remove=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.remove");if(this.size<=0)throw new Error("Attempted to remove from an empty DoublyLinkedList");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");var t=this.head,i=!1;if(JSON.stringify(this.head.data)===JSON.stringify(e))return this.head=t.next,this.head.prev=null,t=null,--this.size,!0;if(JSON.stringify(this.tail.data)===JSON.stringify(e))return t=this.tail,this.tail=t.prev,this.tail.next=null,t=null,--this.size,!0;for(t=t.next;null!==t;){if(JSON.stringify(t.data)===JSON.stringify(e)){i=!0;var n=t.prev;n.next=t.next,t.next.prev=n,t=null,--this.size;break}t=t.next}return i},r.prototype.removeNth=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.removeNth");if("number"!=typeof e)throw new TypeError("Invalid argument for DoublyLinkedList.removeNth");if(0>e||e>=this.size)throw new Error("Index out of bounds on DoublyLinkedList.removeNth");var t=this.head;if(0===e)return this.head=t.next,this.head.prev=null,t=null,void--this.size;if(e===this.size-1)return t=this.tail,this.tail=t.prev,this.tail.next=null,t=null,--this.size,!0;t=t.next;for(var i=1;e>i;++i)t=t.next;var n=t.prev;n.next=t.next,t.next.prev=n,t=null,--this.size},r.prototype.find=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for DoublyLinkedList.find");if(this.size<=0)throw new Error("Attempted to find a node from an empty DoublyLinkedList");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");for(var t=this.head,i=!1;null!==t;){if(JSON.stringify(t.data)===JSON.stringify(e)){i=!0;break}t=t.next}return i?t:!1},r.prototype.findNth=function(e){if("undefined"==typeof e)throw new TypeError("Too few arguments for DoublyLinkedList.findNth");if("number"!=typeof e)throw new TypeError("Invalid argument for DoublyLinkedList.findNth");if(0>e||e>=this.size)throw new Error("Index out of bounds; attempted to find a node from a SinglyLinkedList that does not exist");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");for(var t=this.head,i=0;e>i;++i)t=t.next;return t},t.exports=r},{"./bidirectional_node.js":2}],5:[function(e,t,i){const n=e("./unidirectional_node.js"),r=function(e){this.front,this.back,this.size,"undefined"!=typeof e?(this.front=new n(e),this.back=this.front,this.front.next=this.back,this.back.next=null,this.size=1):(this.front=null,this.back=null,this.size=0)};r.prototype.enqueue=function(e){if("undefined"==typeof e)throw new Error("Too few arguments in Queue.enqueue");var t=new n(e);if(null===this.front&&null===this.back)this.front=t,this.back=this.front,this.front.next=this.back,this.back.next=null,++this.size;else{if(null===this.front||null===this.back)throw new Error("Either front or back is not set in an a queue at once. Please report this to https://github.com/nickzuber/needle/issues");this.back.next=t,this.back=t,++this.size}},r.prototype.dequeue=function(){if(0===this.size)throw new Error("Attempted to dequeue from empty queue in Queue.enqueue");var e=this.front.next;this.front=null,this.front=e,--this.size},t.exports=r},{"./unidirectional_node.js":7}],6:[function(e,t,i){"use strict";const n=e("./unidirectional_node.js"),r=function(e){this.head,this.size,"undefined"!=typeof e?(this.head=new n(e),this.size=1):(this.head=null,this.size=0)};r.prototype.insertFront=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.insertFront");var t=new n(e);if(null===this.head)this.head=t;else{var i=this.head;this.head=t,this.head.next=i}++this.size},r.prototype.insertNth=function(e,t){if("undefined"==typeof t||"undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.insertNth");if("number"!=typeof e)throw new TypeError("Invalid argument for SinglyLinkedList.insertNth");if(0>e||e>=this.size)throw new Error("Index out of bounds on SinglyLinkedList.insertNth");if(null===this.head)return!1;if(0===e)return void this.insertFront(t);for(var i=new n(t),r=this.head,o=1;e>o;++o)r=r.next;var s=r.next;r.next=i,i.next=s,++this.size},r.prototype.insertAfter=function(e,t){if("undefined"==typeof t||"undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.insertAfter");if(null===this.head)return!1;for(var i=new n(t),r=this.head,o=!1;null!==r;){if(JSON.stringify(r.data)===JSON.stringify(e)){o=!0;break}r=r.next}if(o){var s=r.next;return r.next=i,i.next=s,++this.size,!0}return!1},r.prototype.insertBack=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.insertBack");var t=new n(e);if(null===this.head)this.head=t;else{for(var i=this.head;null!==i.next;)i=i.next;i.next=t}++this.size},r.prototype.remove=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.remove");if(this.size<=0)throw new Error("Attempted to remove from an empty SinglyLinkedList");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");var t=null,i=this.head,n=!1;if(JSON.stringify(i.data)===JSON.stringify(e))return this.head=i.next,i=null,--this.size,!0;for(t=i,i=t.next;null!==i;){if(JSON.stringify(i.data)===JSON.stringify(e)){n=!0,t.next=i.next,i=null,--this.size;break}t=i,i=i.next}return n},r.prototype.removeNth=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.removeNth");if("number"!=typeof e)throw new TypeError("Invalid argument for SinglyLinkedList.removeNth");if(0>e||e>=this.size)throw new Error("Index out of bounds on SinglyLinkedList.removeNth");var t=null,i=this.head;if(0===e)return this.head=i.next,i=null,void--this.size;t=i,i=i.next;for(var n=1;e>n;++n)t=i,i=i.next;t.next=i.next,i=null,--this.size},r.prototype.find=function(e){if("undefined"==typeof e)throw new Error("Too few arguments for SinglyLinkedList.find");if(this.size<=0)throw new Error("Attempted to find a node from an empty SinglyLinkedList");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");for(var t=this.head,i=!1;null!==t;){if(JSON.stringify(t.data)===JSON.stringify(e)){i=!0;break}t=t.next}return i?t:!1},r.prototype.findNth=function(e){if("undefined"==typeof e)throw new TypeError("Too few arguments for SinglyLinkedList.findNth");if("number"!=typeof e)throw new TypeError("Invalid argument for SinglyLinkedList.findNth");if(0>e||e>=this.size)throw new Error("Index out of bounds; attempted to find a node from a SinglyLinkedList that does not exist");if(null===this.head&&this.size>0)throw new Error("Null head in an unemptied list. Please report this to https://github.com/nickzuber/needle/issues");for(var t=this.head,i=0;e>i;++i)t=t.next;return t},t.exports=r},{"./unidirectional_node.js":7}],7:[function(e,t,i){"use strict";const n=function(e){this.data=e||void 0,this.next=null};t.exports=n},{}]},{},[1]);